{"version":3,"sources":["firebase.js","EditPageView.js","App.js","serviceWorker.js","index.js"],"names":["fb","initialize","callback","this","app","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","db","firestore","auth","base","Rebase","createClass","onAuthStateChanged","user","showAuthPopup","provider","GoogleAuthProvider","signInWithPopup","then","result","console","log","catch","error","EditPageView","props","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","pageData","modules","toolbar","header","list","script","indent","direction","size","color","background","font","align","content","delta","source","editor","contents","getContents","ref","set","deltas","JSON","stringify","merge","window","confirm","delete","event","target","value","title","onSnapshot","doc","data","bind","puid","path","substr","lastIndexOf","react_default","a","createElement","className","onClick","returnFunc","style","backgroundColor","handleDelete","type","defaultValue","onChange","handleTitleChange","handleColorChange","readOnly","lib_default","parse","updatePage","Component","App","stories","selectedStory","selectedPage","signOut","location","reload","setState","bindCollection","context","withRefs","story","collection","dataTransfer","setDragImage","Image","page","pagesNew","pages","pageX","pageY","indexOf","x","y","add","prompt","editing","users","uid","description","public","handleUserAuth","_this2","authUI","handleLogoutClicked","src","photoURL","handleLoginClicked","storiesList","map","key","handleStorySelected","addStory","pagesTiles","styles","position","width","height","padding","top","left","overflow","zIndex","substring","draggable","onDrag","handleTileDrag","onDragStart","handleTileDragStart","onDragEnd","handleTileRelease","handlePageSelect","react_lineto_default","from","to","addTile","editView","src_EditPageView","undefined","hidden","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.49c26f9b.chunk.js","sourcesContent":["import firebase from 'firebase/app'\nimport 'firebase/auth'\nimport 'firebase/firestore'\nimport Rebase from 're-base'\n\nconst fb = {\n\n  // Must be bound to component\n  initialize: function(callback) {\n    var config = {\n      apiKey: \"AIzaSyA2qBQFBKatLl9z8wFwR4RnuDX2_QnG2Sk\",\n      authDomain: \"paracord-engine.firebaseapp.com\",\n      databaseURL: \"https://paracord-engine.firebaseio.com\",\n      projectId: \"paracord-engine\",\n      storageBucket: \"paracord-engine.appspot.com\",\n      messagingSenderId: \"512623900874\"\n    };\n    this.app = firebase.initializeApp(config);\n\n    fb.db = firebase.firestore(this.app);\n    fb.auth = firebase.auth();\n    fb.base = Rebase.createClass(fb.db);\n\n    fb.auth.onAuthStateChanged(function(user) {\n      if (user) {\n        callback(user);\n        // User is signed in.\n        // console.log(user);\n        // fb.user = {\n        //   displayName: user.displayName,\n        //   email: user.email,\n        //   photoURL: user.photoURL,\n        //   uid: user.uid,\n        // }\n      } else {\n        callback(null);\n        // fb.user = null;\n      }\n    });\n  },\n\n\n  showAuthPopup: function() {\n\n    var provider = new firebase.auth.GoogleAuthProvider();\n    this.auth.signInWithPopup(provider).then(function(result) {\n      // User signed in!\n      // this.user.uid = result.user.uid;\n      this.user = result.user;\n      console.log(this.user);\n    }).catch(function(error) {\n      // An error occurred\n    });\n  }\n\n\n\n\n}\nexport default fb;\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport ReactQuill from 'react-quill'; // ES6\r\nimport 'react-quill/dist/quill.snow.css'; // ES6\r\n\r\nimport fb from './firebase.js';\r\n\r\nclass EditPageView extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            pageData: this.props.pageData\r\n        }\r\n\r\n        var toolbarOptions = [\r\n            ['bold', 'italic', 'underline', 'strike'],        // toggled buttons\r\n            ['blockquote', 'code-block'],\r\n\r\n            [{ 'header': 1 }, { 'header': 2 }],               // custom button values\r\n            [{ 'list': 'ordered'}, { 'list': 'bullet' }],\r\n            [{ 'script': 'sub'}, { 'script': 'super' }],      // superscript/subscript\r\n            [{ 'indent': '-1'}, { 'indent': '+1' }],          // outdent/indent\r\n            [{ 'direction': 'rtl' }],                         // text direction\r\n\r\n            [{ 'size': ['small', false, 'large', 'huge'] }],  // custom dropdown\r\n            [{ 'header': [1, 2, 3, 4, 5, 6, false] }],\r\n\r\n            [{ 'color': [] }, { 'background': [] }],          // dropdown with defaults from theme\r\n            [{ 'font': [] }],\r\n            [{ 'align': [] }],\r\n            ['link', 'image'],\r\n\r\n            ['clean']                                         // remove formatting button\r\n        ];\r\n\r\n        this.modules = {\r\n            'toolbar': toolbarOptions,\r\n            // 'image-tooltip': true,\r\n            // 'link-tooltip': true\r\n        }\r\n    }\r\n\r\n    updatePage(content, delta, source, editor) {\r\n        if(!this.editor) {\r\n            this.editor = editor;\r\n        }\r\n        let contents = editor.getContents();\r\n\r\n        console.log(contents);\r\n        this.state.pageData.ref.set({deltas: JSON.stringify(contents)}, {merge: true});\r\n    }\r\n\r\n    handleDelete() {\r\n        if(window.confirm(\"Are you sure you want to delete this page?\\nYou can't undo this!\")) {\r\n            this.state.pageData.ref.delete();\r\n        }\r\n    }\r\n\r\n    handleColorChange(event) {\r\n        this.state.pageData.ref.set({color: event.target.value}, {merge: true});\r\n    }\r\n    handleTitleChange(event) {\r\n        this.state.pageData.ref.set({title: event.target.value}, {merge: true});\r\n    }\r\n\r\n    componentWillMount() {\r\n        if(!fb.app) {\r\n            return;\r\n        }\r\n\r\n        //TODO: store deltas as array and update per-delta if user did not cause\r\n        this.state.pageData.ref.onSnapshot(function(doc) {\r\n            console.log(doc.data());\r\n            if(this.editor) {\r\n                // this.editor.updateContents(JSON.parse(doc.data().deltas));\r\n            }\r\n        }.bind(this));\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        // console.log(this.props.pageData.deltas);\r\n        let puid = this.props.pageData && this.props.pageData.ref.path || \"\";\r\n        puid = puid.substr(puid.lastIndexOf(\"/\") + 1);\r\n\r\n        return (<div>\r\n            <div className=\"EditToolbar\">\r\n                <button onClick={this.props.returnFunc}>Back</button>\r\n                <button style={{backgroundColor: \"red\"}}\r\n                        onClick={this.handleDelete.bind(this)}>Delete</button>\r\n                <label>Page Title: </label>\r\n                <input className=\"EditBarInput\"\r\n                       type=\"text\"\r\n                       defaultValue={this.state.pageData.title || \"white\"}\r\n                       onChange = {this.handleTitleChange.bind(this)} />\r\n                <label>Tile Color: </label>\r\n                <input className=\"EditBarInput\"\r\n                       type=\"text\"\r\n                       defaultValue={this.state.pageData.color || \"white\"}\r\n                       onChange = {this.handleColorChange.bind(this)} />\r\n                <label>Page ID (For Linking): </label>\r\n                <input className=\"EditBarInput\"\r\n                       readOnly=\"true\"\r\n                       type=\"text\"\r\n                       value={puid} />\r\n            </div>\r\n            <ReactQuill className=\"ReactQuill\"\r\n                        modules={this.modules}\r\n                        defaultValue={JSON.parse(this.state.pageData.deltas) || \"\"}\r\n                        onChange={this.updatePage.bind(this)} />\r\n        </div>)\r\n    }\r\n}\r\n\r\nexport default EditPageView;\r\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport EditPageView from './EditPageView'\n\nimport fb from './firebase.js';\nimport LineTo from \"react-lineto\";\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      user: null,\n      stories: [],\n      selectedStory: null,\n      selectedPage: null,\n    }\n  }\n\n  handleLoginClicked() {\n    fb.showAuthPopup();\n    //TODO: Fix this bs with database rules\n\n  }\n\n  handleLogoutClicked() {\n    if(!window.confirm(\"Sign out?\")) {\n      return;\n    }\n    fb.auth.signOut();\n    window.location.reload(true);\n\n  }\n\n  handleUserAuth(user) {\n    this.setState({user: user});\n    if(user) {\n        fb.base.bindCollection(`Stories`, {\n            context: this,\n            state: 'stories',\n            withRefs: true\n        });\n    }\n  }\n\n  handleStorySelected(story) {\n    if(this.state.selectedStory) {\n      //TODO: Remove binding\n      //fb.base.removeBinding()\n    }\n    this.setState({selectedStory: story});\n    if(!story) {\n        return;\n    }\n    fb.base.bindCollection(story.ref.collection('Pages'), {\n      context: this,\n      state: 'pages',\n      withRefs: true\n    });\n  }\n\n  handleTileDragStart(event) {\n    // Don't show ghost on drag\n      event.dataTransfer.setDragImage(new Image(0, 0), 0, 0);\n  }\n\n  handleTileDrag(event, page) {\n    let pagesNew = this.state.pages;\n    if(event.pageX === 0 && event.pageY === 0) {\n      return;\n    }\n    pagesNew[this.state.pages.indexOf(page)].x = event.pageX;\n    pagesNew[this.state.pages.indexOf(page)].y = event.pageY - 200;\n    this.setState({\n        pages: pagesNew\n    })\n  }\n\n  handleTileRelease(event, page) {\n      page.ref.set({\n          x: event.pageX < 0 ? 0 : event.pageX,\n          y: event.pageY - 200 < 0 ? 0 : event.pageY - 200,\n      }, {merge: true});\n  }\n\n  handlePageSelect(page) {\n    this.setState({\n        selectedPage: page,\n    });\n  }\n\n  addTile() {\n      this.state.selectedStory.ref.collection('Pages').add({\n        title: window.prompt(\"Enter Page Title:\") || \"New Page\",\n        x: 300,\n        y: 300,\n        deltas: \"{}\",\n        editing: null,\n    });\n  }\n\n  addStory() {\n\n      const users = {};\n      users[this.state.user.uid] = \"rwa\";\n\n      fb.db.collection('Stories').add({\n          title: window.prompt(\"Enter story name:\") || \"My Story\",\n          description: window.prompt(\"Enter story description:\"),\n          public: false,\n          users: users,\n      });\n  }\n\n  componentWillMount() {\n    if(!fb.app) {\n      fb.initialize(this.handleUserAuth.bind(this));\n    }\n    console.log(\"Will bind..\");\n\n    // if(!this.state.user) {\n    //     return;\n    // }\n    // fb.base.bindCollection(`Stories`, {\n    //     context: this,\n    //     state: 'stories',\n    //     withRefs: true\n    // });\n  }\n\n  render() {\n\n\n    let authUI = this.state.user ? (\n        <div>\n          <img className=\"authUI\" onClick={this.handleLogoutClicked} src={this.state.user.photoURL} />\n        </div>\n    ) : (\n        <div>\n            <button className=\"authUI\" onClick={this.handleLoginClicked.bind(this)} >Login</button>\n        </div>\n    );\n\n    let storiesList = this.state.selectedStory !== null ? (<div />) : (\n        <div>\n            {this.state.stories.map((story) => {\n                return (\n                    <div className=\"storyListItem\"\n                         key={story.ref.path}\n                         onClick={() => {this.handleStorySelected(story)} }>\n                      <h5>{story.title}</h5>\n                      <p>{story.description}</p>\n                    </div>\n                );\n            })}\n            <button className=\"AddTileButton\" onClick={() => {this.addStory()}}>+</button>\n        </div>\n    );\n\n\n\n    //TODO: size container to content\n    let pagesTiles = this.state.selectedStory && this.state.pages && (\n        <div className=\"pageTileContainer\">\n            {this.state.pages.map( page => {\n              let styles = {\n                position: \"absolute\",\n                width: '100px',\n                height: '100px',\n                padding: '5px',\n                top: 'calc(10vh + '+page.y+\"px)\",\n                left: page.x+\"px\",\n                backgroundColor: page.color || 'white',\n                overflow: 'hidden',\n                  zIndex: 10,\n              };\n\n                  console.log(page.ref.path);\n              return (\n                  <div key={page.ref.path}\n                       className={page.ref.path.substring(page.ref.path.lastIndexOf(\"/\")+1)}\n                       draggable=\"true\"\n                       onDrag={event => {this.handleTileDrag(event, page)}}\n                       onDragStart={event => {this.handleTileDragStart(event)}}\n                       onDragEnd={event => {this.handleTileRelease(event, page)}}\n                       onClick={() => {this.handlePageSelect(page)}}\n                       style={styles}>\n                    <h5>{page.title}</h5>\n                    <p>{page.ref.path.substring(page.ref.path.lastIndexOf(\"/\")+1)}</p>\n                  </div>\n              )\n            })}\n            <LineTo from=\"IrKYmclgh80Hpf42rWQk\"\n                    to=\"rTO5188xnem2HaxKoqbr\" />\n            <button className=\"AddTileButton\" onClick={() => {this.addTile()}}>+</button>\n        </div>\n    );\n\n    let editView = this.state.selectedPage ? (\n        <EditPageView pageData={this.state.selectedPage}\n                      returnFunc={() => this.handlePageSelect(null)}/>\n    ) : undefined;\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h5>\n              <button className=\"BackButton\"\n                      hidden={this.state.selectedStory === null}\n                      onClick={() => {this.handleStorySelected(null); this.handlePageSelect(null);}}> {\"<<\"}\n                      </button>\n              Paracord <span><i>[beta]</i></span>\n          </h5>\n            {authUI}\n        </header>\n        <div className=\"App-content\">\n          {editView || pagesTiles || storiesList}\n\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}